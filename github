# Omite --global para configurar tu identidad solo en este repositorio
git config --global user.email "neuronaedgar@gmail.com"
git config --global core.askpass
git config --global color.ui auto   # false

# configuración predeterminada "local" aplica al repositorio de contexto: .git/config
git config --local 

# Configuración "global" se aplica usuario de un sistema operativo: ~/.gitconfig
git config --global 

# Configuración "system" aplica a todo servidor usuarios/repositorios: $(prefix)/etc/gitconfig
git config --system 

## Modificar en local y queremos sincronizar con remoto
# Indícar a Git que realice el seguimiento de tu nuevo archivo
git add fichero.txt

# Confirmacion "instantánea""staging area" preparada en el historial del proyecto.
git commit -m 'cometario de los cambios realizados'

# enviar cambios a la rama main (la rama de Bitbucket) en el origen (Bitbucket Server)
git push origin main 

# crear una rama, pero no te lleva a ella.
git branch future-plans

# Extrae la nueva rama que acabas de crear. Puntero a la nueva rama.
git checkout future-plans 

# Fusionar rama local future-plans a rama principal
git status
git checkout main
git merge future-plans

## la rama master y 'origin/master' han divergido,
# Integrar los cambios de origin/master en rama local y crear una fusión commit.
git merge origin/master
o ---- A ---- B origin/master (upstream work) 
       \ C master (your work)

o ---- A ---- B origin/master (upstream work) 
        \ C -- \ M master (your work)

# Copia commit C (tu trabajo) como si lo hubieras basado en commit B en lugar de A.
git rebase origin/master
o ---- A ---- B origin/master (upstream work) 
       \ C master (your work)

o ---- A ---- B origin/master (upstream work) 
               \ C' master (your work)

##
# create a new repository on the command line
echo "# terraform" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/neuronaedgar/terraform.git
git push -u origin main

# push an existing repository from the command line
git remote add origin https://github.com/neuronaedgar/terraform.git
git branch -M main
git push -u origin main


# Enumera las conexiones remotas que tienes con otros repositorios.
git remote -v
git remote

# Remove the connection to the remote repository called ＜name＞
git remote rm <name>
git remote show origin

# Deletes any local branches for ＜NAME＞ that are not present on the remote repository.
git remote PRUNE
 
# listado ramas repositorios remotas "remote-repo/" y locales "origin/"
git branch -r

# Chnage the new upstream repository you've specified for your fork
git remote add upstream https://github.com/octocat/Spoon-Knife.git

# Assuming their updates are on master, and you are on the branch you want to merge the changes into.
git remote add origin https://github.com/<github-username>/<repo-name>.git
git pull origin master

# want to push the merge back to your copy of the repository:
git push <remote-name> <branch-name>
git push origin master

# Descarga el contenido remoto, pero sin actualizar el estado de trabajo del repositorio local.
git fetch <remote>
git fetch <remote> <branch>
git fetch --dry-run
git fetch upstream
git merge upstream/main

# Descarga el contenido remoto a la rama local activa e inmediatamente ejecuta git merge para crear un commit fusionado con el nuevo contenido remoto.
git pull 

# lista de referencia de las ramas locales.
git branch

# Ejemplo describe método publicar local a repositorio central
git checkout main
git fetch origin main
git rebase -i origin/main
# Squash commits, fix up commit messages etc.
git push origin main

# create a fork of a repository,
gh repo fork 



